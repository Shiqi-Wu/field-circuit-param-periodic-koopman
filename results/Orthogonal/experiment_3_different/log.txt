Model: ParamOrthogonalKoopmanWithInputs(
  (dictionary): TrainableDictionary(
    (encoder): Transformer_like_Encoder(
      (input_layer): Linear(in_features=7, out_features=64, bias=True)
      (layers): ModuleList(
        (0-5): 6 x FeedForwardLayerConnection(
          (feed_forward): FeedForward(
            (w_1): Linear(in_features=64, out_features=128, bias=True)
            (w_2): Linear(in_features=128, out_features=64, bias=True)
            (dropout): Dropout(p=0.2, inplace=False)
          )
          (sublayer): SublayerConnection(
            (norm): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
            (dropout): Dropout(p=0.2, inplace=False)
          )
        )
      )
      (output_layer): Linear(in_features=64, out_features=45, bias=True)
    )
  )
  (u_dictionary): TrainableDictionary(
    (encoder): Transformer_like_Encoder(
      (input_layer): Linear(in_features=2, out_features=64, bias=True)
      (layers): ModuleList(
        (0-5): 6 x FeedForwardLayerConnection(
          (feed_forward): FeedForward(
            (w_1): Linear(in_features=64, out_features=64, bias=True)
            (w_2): Linear(in_features=64, out_features=64, bias=True)
            (dropout): Dropout(p=0.2, inplace=False)
          )
          (sublayer): SublayerConnection(
            (norm): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
            (dropout): Dropout(p=0.2, inplace=False)
          )
        )
      )
      (output_layer): Linear(in_features=64, out_features=20, bias=True)
    )
  )
  (Q_matrix): ParamSpecialOrthogonalMatrix(
    (skew_symmetric_matrix): ParamSkewSymmetricMatrix(
      (resnet): ResNet(
        (layer1): Sequential(
          (0): BasicBlock2(
            (fc1): Linear(in_features=2, out_features=16, bias=True)
            (fc2): Linear(in_features=16, out_features=16, bias=True)
            (shortcut): Sequential(
              (0): Linear(in_features=2, out_features=16, bias=True)
            )
          )
        )
        (layer2): Sequential(
          (0): BasicBlock2(
            (fc1): Linear(in_features=16, out_features=32, bias=True)
            (fc2): Linear(in_features=32, out_features=32, bias=True)
            (shortcut): Sequential(
              (0): Linear(in_features=16, out_features=32, bias=True)
            )
          )
        )
        (layer3): Sequential(
          (0): BasicBlock2(
            (fc1): Linear(in_features=32, out_features=64, bias=True)
            (fc2): Linear(in_features=64, out_features=64, bias=True)
            (shortcut): Sequential(
              (0): Linear(in_features=32, out_features=64, bias=True)
            )
          )
        )
        (linear): Linear(in_features=64, out_features=1378, bias=True)
      )
    )
  )
  (Lambda_matrix): ParamBlockDiagonalMatrixWoV(
    (resnet): ResNet(
      (layer1): Sequential(
        (0): BasicBlock2(
          (fc1): Linear(in_features=2, out_features=16, bias=True)
          (fc2): Linear(in_features=16, out_features=16, bias=True)
          (shortcut): Sequential(
            (0): Linear(in_features=2, out_features=16, bias=True)
          )
        )
      )
      (layer2): Sequential(
        (0): BasicBlock2(
          (fc1): Linear(in_features=16, out_features=32, bias=True)
          (fc2): Linear(in_features=32, out_features=32, bias=True)
          (shortcut): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
          )
        )
      )
      (layer3): Sequential(
        (0): BasicBlock2(
          (fc1): Linear(in_features=32, out_features=64, bias=True)
          (fc2): Linear(in_features=64, out_features=64, bias=True)
          (shortcut): Sequential(
            (0): Linear(in_features=32, out_features=64, bias=True)
          )
        )
      )
      (linear): Linear(in_features=64, out_features=26, bias=True)
    )
  )
  (B_matrix): ParamMatrix(
    (resnet): ResNet(
      (layer1): Sequential(
        (0): BasicBlock2(
          (fc1): Linear(in_features=2, out_features=16, bias=True)
          (fc2): Linear(in_features=16, out_features=16, bias=True)
          (shortcut): Sequential(
            (0): Linear(in_features=2, out_features=16, bias=True)
          )
        )
      )
      (layer2): Sequential(
        (0): BasicBlock2(
          (fc1): Linear(in_features=16, out_features=32, bias=True)
          (fc2): Linear(in_features=32, out_features=32, bias=True)
          (shortcut): Sequential(
            (0): Linear(in_features=16, out_features=32, bias=True)
          )
        )
      )
      (layer3): Sequential(
        (0): BasicBlock2(
          (fc1): Linear(in_features=32, out_features=64, bias=True)
          (fc2): Linear(in_features=64, out_features=64, bias=True)
          (shortcut): Sequential(
            (0): Linear(in_features=32, out_features=64, bias=True)
          )
        )
      )
      (linear): Linear(in_features=64, out_features=1219, bias=True)
    )
  )
)
Optimizer: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    capturable: False
    differentiable: False
    eps: 1e-08
    foreach: None
    fused: None
    initial_lr: 0.001
    lr: 0.001
    maximize: False
    weight_decay: 0
)
StepLR: <torch.optim.lr_scheduler.StepLR object at 0x76f3aefe5190>
Device: cuda
Config: {'save_dir': '/home/shiqi_w/code/field-circuit-param-periodic-koopman/results/Orthogonal/experiment_3_different', 'data_dir': '/home/shiqi_w/code/field-circuit-param-periodic-koopman/data/differentMur', 'step_size': 10, 'sample_step': 1, 'pca_dim': 7, 'inputs_dim': 2, 'params_dim': 2, 'batch_size': 512, 'validation_split': 0.2, 'dictionary_dim': 45, 'dictionary_layers': [64, 128, 6], 'u_dictionary_dim': 20, 'u_layers': [64, 64, 6], 'Q_layers': [1, 1, 1], 'T_layers': [1, 1, 1], 'B_layers': [1, 1, 1], 'lr': 0.001, 'step_size_lr': 400, 'gamma_lr': 0.9, 'epochs': 5000, 'encoder_type': 'Transformer_like', 'Description': 'This is the same as experiment_1_same, but with a different dictionary. The dictionary is the same with previous work, with a transformer-like encoder. Also, a input encoder is consrtructed.'}
